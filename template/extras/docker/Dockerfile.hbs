FROM node:22-alpine AS base
ENV NODE_ENV=production CI=true
RUN apk update --no-cache && apk add --no-cache libc6-compat

FROM base AS deps

WORKDIR /app
{{#ifEquals pkgManager "npm"}}
COPY package*.json ./
RUN npm ci --omit=dev
{{/ifEquals}}
{{#ifEquals pkgManager "yarn"}}
COPY package.json yarn.lock ./
ENV YARN_VERSION=4.9.1
RUN corepack enable && corepack prepare yarn@${YARN_VERSION} && yarn set version ${YARN_VERSION}
RUN yarn install --frozen-lockfile --production
{{/ifEquals}}
{{#ifEquals pkgManager "pnpm"}}
COPY package.json pnpm-lock.yaml ./
RUN pnpm install --frozen-lockfile --production
{{/ifEquals}}

FROM deps AS builder

WORKDIR /app
COPY . .
{{#ifEquals pkgManager "npm"}}
RUN npm ci
{{/ifEquals}}
{{#ifEquals pkgManager "yarn"}}
RUN yarn install --frozen-lockfile
{{/ifEquals}}
{{#ifEquals pkgManager "pnpm"}}
RUN pnpm install --frozen-lockfile
{{/ifEquals}}
{{#if usePrisma}}
RUN {{pkgRunExternal}} prisma generate
{{/if}}
RUN {{pkgRunScript}} build

FROM base AS runner

# Don't run production as root
RUN addgroup --system --gid 1001 nodejs
RUN adduser --system --uid 1001 backend
USER backend

WORKDIR /app

RUN chown -R backend:nodejs /app && \
chmod -R 770 /app

COPY --from=builder --chown=backend:nodejs /app/dist ./dist
COPY --from=deps --chown=backend:nodejs /app/node_modules ./node_modules
{{#if usePrisma}}
COPY --from=builder --chown=backend:nodejs /app/node_modules/.prisma ./node_modules/.prisma
COPY --from=builder --chown=backend:nodejs /app/prisma ./prisma
{{/if}}

COPY --from=builder --chown=backend:nodejs /app/package.json ./

CMD ["node", "dist/main"]
